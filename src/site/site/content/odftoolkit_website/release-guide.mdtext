# Release Guide

We are doing two kind of releases at the same time:

1. One **Maven release** with the artefacts of each project.
2. One **GitHub release** bundling artefacts of the ODF Toolkit as ZIPs.

## Maven Release Guide

The release artifacts for each project are deployed to the Maven repository. Making release artefacts should follow the following steps:

### Only once your configuration Setup

1. **Maven Repro Access**</br>Make sure you have access to Maven repro via our [Sonatype JIRA issue](https://issues.sonatype.org/browse/OSSRH-960). Add your userID & password to your local [&lt;USER_HOME&gt;/.m2/settings.xml](https://maven.apache.org/settings.html). In the end, you should be able to log in at <https://oss.sonatype.org/#welcome>.

2. **Install GNU PG**</br>Install in your OS. [See details in tutorial 'publish your artifacts to Maven'](https://dzone.com/articles/publish-your-artifacts-to-maven-central)

3. **Configure GNU PG**</br>Add your GNU and JIRA credentials to your local [&lt;USER_HOME&gt;/.m2/settings.xml](https://maven.apache.org/settings.html).
See [our example settings.xml](docs/settings-example.xml) and search & replace the placeholders starting with 'YOUR_'.

### Recipe for every release

There are two kinds of releases a quick SNAPSHOT release, where the SNAPSHOT will be exchanged by a timestamp or the final release.

#### Snapshot Release

1. **Deploy Snapshot**</br>

    ```shell
    mvn deploy
    ```

#### Final Release

1. **Prepare documentation**</br>Working on a release git branch and using a GitHub fork to test the new GitHub pages helps a lot!

    ```shell
    git checkout -b release-candidate
    ```

   The following documents need currently manual adjustment:

    ```shell
        ./README.md
        ./src/site/content/odftoolkit_website/ReleaseNotes.mdtext
        ./src/site/content/odftoolkit_website/downloads.mdtext
    ```

    The mdtext files are being converted to HTML doing (on Linux)

    ```shell
    cd src/site
    build-html.sh
    git add ../..
    git commit -m"Documentation update for the upcoming release"
    ```

1. **Prepare JavaDoc**

    JavaDoc has to be generated with the upcoming release number already set. Therefore instead of doing it manually I do a

    ```shell
    mvn release:prepare # should generate the javadoc - otherwise 'mvn install'
    git stash # to remove the changed pom.xml
    cd src/site
    copy-javadoc.sh
    git add ../..
    git commit -m"New JavaDoc for the upcoming release"
    ```

1. **A clean start**</br>Make sure that your working copy is clean.
   Preferably check out a clean version from [GitHub](https://github.com/tdf/odftoolkit).

    ```shell
    mvn clean
    mvn release:clean
    ```

1. **Prepare the release**

   ```shell
   mvn release:prepare
   ```

   This will start the interactive release preparation. You need to supply Maven with the versions of the release. "release version" should be the version of the intended release (recommended value should be fine). "SCM release tag or label" should include the RC version (e.g. odftoolkit-0.10.0). "new development version" should be the current SNAPSHOT version.

1. **Perform the release**

   ```shell
   mvn release:perform
   ```

   This will checkout the tag to the target directory, build and package everything and upload the artifacts to the staging repository.
   Users will download the mirrored release artifacts from machines outside TDF control. Users need to verify that the copy downloaded is identical to the original. Mirrored copies of checksums, KEYS and signature files (.asc and .md5 files) will be present on the mirrors but must never be used for verification. So, all links from the podling website to signatures, sums and [KEYS](https://github.com/tdf/odftoolkit/blob/master/KEYS) need to refer to the original documents on GitHub. See release signing guide for more information.

1. **Add the Git tag manually after branch rebase**
    Push the branch and if the branch is rebased the tag has to be added and pushed on the correct commit manually.

1. **What to Do If Something Goes Wrong**

    * **Step 1:** Undo the release:

    ```shell
    git reset â€“hard HEAD~1 (Depending upon when the error occurred, you might undo multiple commits)
    ```

    * **Step 2:** Delete the tag.

    ```shell
    git tag -d tagName
    git push origin :refs/tags/tagName
    ```

1. **Review and approve the Maven Nexus Deliverables**

    Log into <https://oss.sonatype.org/#welcome> and review the artefacts of the release, if it is erroneous drop it.
    1. If the release artefacts are correct, [close the repository](https://help.sonatype.com/repomanager2/staging-releases/managing-staging-repositories).
    2. After the closing process is done, you may release the repository.
    3. You may find the artefacts of the release among on Maven, e.g.: <https://repo1.maven.org/maven2/org/odftoolkit/odftoolkit/>

1. **Publish Document**</br> Publish all of the prepared document on the website and update the download page.
1. **Send Announcements**</br> The release manager need to send announcements to odf-dev list. The sample looks like:

   ```shell
      Subject:[ANNOUNCEMENT] "ODF Toolkit 0.11.0 Release"
      To: dev@odftoolkit.org
      Hi all,

      The ODF Toolkit team is pleased to announce the release of 0.11.0 (>=JDK 11) supporting ODF 1.2.
      The list of changes is available in the release notes[1].

      All new ODF Toolkit components (binary, source and JavaDoc bundles) are available as GitHub releases [2].
      Or in the central Maven repository under group ID "org.odftoolkit" and version "0.11.0" [3,4,5].

      [1] ./ReleaseNotes.html
      [2] https://github.com/tdf/odftoolkit/releases
      [3] https://repo1.maven.org/maven2/org/odftoolkit/odfdom-java/0.11.0/
      [4] https://repo1.maven.org/maven2/org/odftoolkit/odfvalidator/0.11.0/
      [5] https://repo1.maven.org/maven2/org/odftoolkit/xslt-runner/0.11.0/
   ```

## GitHub Release Guide

### The Six Release Artefacts (downloadable from GitHub)

The **GitHub release** has always **six files**:

* **Three ZIPs** representing the ODF Toolkit:
   1. The sources (without the .git directory)
   2. The binaries (including all JARs and WARs of the projects)
   3. The documentation (including all JavaDoc as JARs and the complete website)

* **Three SHA files**, one for each ZIP to proof their correctness.

### Creating Release Artefacts

1. Call from the ODF TOOLKIT base via command line:

    ```shell
    mvn clean
    ```

1. Call from the ODF TOOLKIT base via command line one of the following.

    ```shell
    mvn install -Ppedantic
    mvn install -Ppedantic > mylogFile.txt 2>&1*
    ```

    **NOTE**: The option pedantic checks if all files have either a valid license header or an explicit exception.
    Often helpful for reviewing the build output is redirecting it into an own logfile.

1. You might want to [update the website](website-development.html) to announce the release.

### **Bundling Release Artefacts:**

1. Test the JARs if they are working and if the documentation is correct, esp. JavaDoc references to ODF elements, attributes and units have been created correctly by our JavaDoc taglet project.

test

2. If all project artefacts have been created without an error, they can be bundled into ZIPs and signed via:

    ```shell
    mvn antrun:run@prepare-github-release -Pprepare-release
    ```

The output will be created in the directory: 'ODF_TOOLKIT_BASE/target/release/'.</br></br>
**NOTE:** Don't forget to  check if the ZIPs of the result directory have the correct content.

## Upload of the 6 Release Artefacts

1. Browse to [our GitHub release page](https://github.com/tdf/odftoolkit/releases).
2. Press the "Draft a new release" button (or ask for access rights on the mailing list if not visible).
3. Upload all 6 files from the release and name it like "'odftoolkit-' + version", for instance: odftoolkit-8.0.0-RC2

### **References**

1. [How to Publish Your Artifacts to Maven Central][1]

  [1]: https://dzone.com/articles/publish-your-artifacts-to-maven-central
